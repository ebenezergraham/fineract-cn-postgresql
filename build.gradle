/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.apache.openjpa:openjpa-all:2.2.0'
        classpath 'at.schmutterer.oss.gradle:gradle-openjpa:0.2.0'

    }

}

plugins {
    id 'com.github.hierynomus.license' version '0.13.1'
    id("org.nosphere.apache.rat") version "0.3.1"
    id "com.jfrog.artifactory" version "4.9.5"
}

group 'org.apache.fineract.cn'
version '0.1.0-BUILD-SNAPSHOT'

ext.versions = [
        springcontext: '4.3.3.RELEASE',
        springboot   : '1.4.1.RELEASE',
        findbugs     : '3.0.1',
        frameworklang: '0.1.0-BUILD-SNAPSHOT'
]

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'license'
apply plugin: 'openjpa'

tasks.withType(JavaCompile) {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

}

repositories {
    jcenter()
    mavenLocal()
    maven { url 'https://mifos.jfrog.io/mifos/libs-snapshot/' }
}


dependencies {
    compile(
            [group: 'org.springframework', name: 'spring-context', version: versions.springcontext],
            [group: 'com.google.code.findbugs', name: 'jsr305', version: versions.findbugs],
            [group: 'org.apache.fineract.cn', name: 'lang', version: versions.frameworklang],
            [group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: versions.springboot],
            [group: 'com.jolbox', name: 'bonecp', version: '0.8.0.RELEASE'],
            [group: 'org.flywaydb', name: 'flyway-core', version: '4.0.1'],
            [group: 'org.postgresql', name: 'postgresql', version: '42.2.5'],
            [group: 'org.apache.openjpa', name: 'openjpa-all', version: '2.2.0']
    )
    testCompile(
            [group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springboot]
    )
}

jar {
    from sourceSets.main.allSource
}

publishing {
    publications {
        postgresqlPublication(MavenPublication) {
            from components.java
            groupId project.group
            artifactId project.name
            version project.findProperty('externalVersion') ?: project.version
        }
    }
}

artifactory {
    contextUrl = System.getenv("ARTIFACTORY_URL")
    publish {
        repository {
            repoKey = project.findProperty('artifactoryRepoKey')
            username = System.getenv("ARTIFACTORY_USER")
            password = System.getenv("ARTIFACTORY_PASSWORD")
        }

        defaults {
            publications('postgresqlPublication')
        }
    }
}
artifactoryPublish.dependsOn('clean', 'publishToMavenLocal')

license {
    header rootProject.file('HEADER')
    strictCheck true
    mapping {
        java = 'SLASHSTAR_STYLE'
    }
}

rat {
    // List of exclude directives, defaults to ['**/.gradle/**']
    excludes = [
            ".idea/**",
            ".gradle/**",
            "gradle/**",
            "build/**",
            "gradlew",
            "gradlew.bat",
            "README.md"
    ]
}


openjpa {
    files = fileTree(sourceSets.main.output.classesDir).matching {
        include 'org/apache/fineract/cn/**/repository/*.class'
    }
    enforcePropertyRestrictions = false
    persistenceXmlFile = file('org/apache/fineract/cn/postgresql/repository/persistence.xml')
}
